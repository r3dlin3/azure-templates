{
    "parameters": {
        "mysqlDatabaseName": {
            "type": "string",
            "metadata":{  
                "description":"MySQL Database name used by Wordpress"
             }
        },
        "mysqlAdministratorLogin": {
            "type": "string",
            "metadata":{  
                "description":"MySQL Database admin"
             }
        },
        "mysqlAdministratorPassword": {
            "type": "securestring",
            "metadata":{  
                "description":"MySQL Database admin password"
             }
        },
        "mysqlDTU":{  
            "type":"int",
            "allowedValues":[  
               50,
               100,
               200,
               400,
               800
            ],
            "defaultValue":100,
            "metadata":{  
               "description":"Azure database for MySQL pricing tier"
            }
         },
        "mysqlSkuTier": {
            "type": "string",
            "allowedValues":[  
                "Basic",
                "Standard"
             ],
             "defaultValue":"Standard",
             "metadata":{  
                "description":"MySQL SKU Tier"
             }
        },
        "mysqlSkuSizeMB":{  
            "type":"int",
            "allowedValues":[  
               128000,
               51200
            ],
            "defaultValue":128000,
            "metadata":{  
               "description":"Azure database for MySQL Sku Size"
            }
         },
        "mysqlVersion":{  
            "type":"string",
            "allowedValues":[  
               "5.6",
               "5.7"
            ],
            "defaultValue":"5.7",
            "metadata":{  
               "description":"MySQL version"
            }
         },
        "mysqlCharset": {
            "type": "string",
            "defaultValue": "utf8"
        },
        "mysqlCollation": {
            "type": "string",
            "defaultValue": "utf8_general_ci"
        },
        "appServiceSku": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
              "F1",
              "D1",
              "B1",
              "B2",
              "B3",
              "S1",
              "S2",
              "S3",
              "P1",
              "P2",
              "P3",
              "P4"
            ]
        },
        "appServiceInstanceCount": {
            "type": "int",
            "defaultValue": 1,
            "minValue": 1,
            "metadata": {
              "description": "Describes plan's instance count"
            }
        },
        "webTestLocations": {
            "type": "array",
            "defaultValue": [ 
                {
                    "Id": "emea-nl-ams-azr"
                },
                {
                    "Id": "emea-fr-pra-edge"
                },
                {
                    "Id": "emea-gb-db3-azr"
                }
            ],
            "minLength": 3,
            "metadata": {
              "description": "Collection of locations to perform the test from among us-il-ch1-azr, us-ca-sjc-azr, us-tx-sn1-azr, us-va-ash-azr, us-fl-mia-edge, apac-sg-sin-azr, emea-se-sto-edge, emea-ru-msa-edge, emea-nl-ams-azr, apac-jp-kaw-edge, emea-gb-db3-azr, apac-hk-hkn-azr, emea-fr-pra-edge, emea-ch-zrh-edge, latam-br-gru-edge, emea-au-syd-edge"
            }
        },
        "useCDN": {
           "type": "string",
           "defaultValue": "No",
           "allowedValues": [
               "Yes","No"
           ],
           "metadata": {
                "description": "Instanciate a CDN profile and an endpoint"
            }
        },
        "CDNsku": {
           "type": "string",
           "defaultValue": "Standard_Verizon",
           "allowedValues": [
            "Standard_Verizon", "Premium_Verizon", "Custom_Verizon", "Standard_Akamai"
           ],
           "metadata": {
                "description": "The pricing tier (defines a CDN provider, feature list and rate) of the CDN profile."
            }
        }
    },
    "variables": {
        "suffix" : "[replace(substring(resourceGroup().name,2),'_','-')]",
        "hostingPlanName" : "[concat('ASP',variables('suffix'))]",
        "mysqlServerName": "[toLower(concat('MYS',variables('suffix')))]",
        "webSiteName": "[concat('WAS',variables('suffix'))]",
        "webTestName": "[concat('WTS',variables('suffix'),'-homepage')]",
        "appInsightsName": "[concat('AIN',variables('suffix'))]",
        "cdnProfileName": "[concat('CDP',variables('suffix'))]",
        "cdnEndPointName": "[concat('CDE',variables('suffix'))]"
    },
    "resources": [
        {
            "apiVersion": "2016-03-01",
            "name": "[variables('webSiteName')]",
            "type": "Microsoft.Web/sites",
            "properties": {
                "siteConfig": {
                    "phpVersion": "7.0",
                    "alwaysOn": true,
                    "connectionStrings": [
                        {
                            "name": "defaultConnection",
                            "ConnectionString": "[concat('Database=', parameters('mysqlDatabaseName'), ';Data Source=', variables('mysqlServerName') ,'.mysql.database.azure.com;User Id=',parameters('mysqlAdministratorLogin'),'@',variables('mysqlServerName') ,';Password=',parameters('mysqlAdministratorPassword'))]",
                            "type": "MySQL"
                        }
                    ]
                },
                "name": "[variables('webSiteName')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms',variables('hostingPlanName'))]"
            },
            "resources": [
                {
                    "apiVersion": "2016-03-01",
                    "name": "web",
                    "type": "sourcecontrols",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('webSiteName'))]"
                    ],
                    "properties": {
                        "RepoUrl": "https://github.com/azureappserviceoss/wordpress-azure",
                        "branch": "master",
                        "IsManualIntegration": true
                    }
                },
                {
                    "apiVersion": "2016-03-01",
                    "name": "Microsoft.ApplicationInsights.AzureWebSites",
                    "type": "siteextensions",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('webSiteName'))]",
                        "web"
                    ],
                    "properties": {
                    }
                },
                {
                    "name": "appsettings",
                    "type": "config",
                    "apiVersion": "2016-03-01",
                    "dependsOn": [
                      "[resourceId('Microsoft.Web/sites', variables('webSiteName'))]",
                      "Microsoft.ApplicationInsights.AzureWebSites"
                    ],
                    "properties": {
                      "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
                    }
                  }
            ],
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
            ],
            "apiVersion": "2016-03-01",
            "location": "[resourceGroup().location]"
        },
        {
            "apiVersion": "2016-09-01",
            "name": "[variables('hostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[resourceGroup().location]",
            "properties": {
                "name": "[variables('hostingPlanName')]"
            },
            "sku": {
                "Name": "[parameters('appServiceSku')]",
                "capacity": "[parameters('appServiceInstanceCount')]"
            }
        },
        {
            "name": "[variables('mysqlServerName')]",
            "type": "Microsoft.DBforMySQL/servers",
            "apiVersion": "2016-02-01-privatepreview",
            "location": "[resourceGroup().location]",
            "properties": {
                "version": "[parameters('mysqlVersion')]",
                "administratorLogin": "[parameters('mysqlAdministratorLogin')]",
                "administratorLoginPassword": "[parameters('mysqlAdministratorPassword')]",
                "storageMB": "[parameters('mysqlSkuSizeMB')]",
                "sslEnforcement": "Disabled"
            },
            "sku": {
                "name"    : "MYSQLB100",
                "tier"    : "[parameters('mysqlSkuTier')]",
                "capacity": "[parameters('mysqlDTU')]",
                "size"    : "[parameters('mysqlSkuSizeMB')]"
            },
            "resources": [
                {
                    "name": "[parameters('mysqlDatabaseName')]",
                    "type": "databases",
                    "location": "[resourceGroup().location]",
                    "apiVersion": "2016-02-01-privatepreview",
                    "properties": {
                        "charset": "[parameters('mysqlCharset')]",
                        "collation": "[parameters('mysqlCollation')]"
                    },
                    "dependsOn": [
                        "[concat('Microsoft.DBforMySQL/servers/', variables('mysqlServerName'))]"
                    ]
                }
            ]
        },
        {
          "name": "[concat(variables('mysqlServerName'), '/', 'fwrule', copyIndex(1))]",
          "type": "Microsoft.DBforMySQL/servers/firewallrules",
          "apiVersion": "2016-02-01-privatepreview",
          "copy": {
              "name": "fwrule",
              "count": 7
          },
          "properties": {
              "startIpAddress": "[split(reference(resourceId('Microsoft.Web/sites', variables('webSiteName')), '2015-05-01').possibleOutboundIpAddresses,',')[copyIndex()]]",
              "endIpAddress"  : "[split(reference(resourceId('Microsoft.Web/sites', variables('webSiteName')), '2015-05-01').possibleOutboundIpAddresses,',')[copyIndex()]]"
          },
          "location": "[resourceGroup().location]",
          "dependsOn": [
              "[concat('Microsoft.DBforMySQL/servers/', variables('mysqlServerName'))]"
          ]
      },
        {
            "apiVersion": "2014-04-01",
            "name": "[variables('appInsightsName')]",
            "type": "Microsoft.Insights/components",
            "kind": "web",
            "tags": {
                "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]": "Resource"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites/', variables('webSiteName'))]"
            ],
            "location": "[resourceGroup().location]",
            "properties": {
                "Application_Type": "web",
                "applicationId": "[variables('webSiteName')]"
            }
        },
        {
          "apiVersion": "2015-04-01",
          "name": "[concat('ServerErrors ', variables('webSiteName'))]",
          "type": "Microsoft.Insights/alertrules",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[variables('webSiteName')]"
          ],
          "tags": {
            "[concat('hidden-link:', resourceId('Microsoft.Web/sites', variables('webSiteName')))]": "Resource",
            "displayName": "ServerErrorsAlertRule"
          },
          "properties": {
            "name": "[concat('ServerErrors ', variables('webSiteName'))]",
            "description": "[concat(variables('webSiteName'), ' has some server errors, status code 5xx.')]",
            "isEnabled": true,
            "condition": {
              "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
              "dataSource": {
                "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
                "resourceUri": "[resourceId('Microsoft.Web/sites', variables('webSiteName'))]",
                "metricName": "Http5xx"
              },
              "operator": "GreaterThan",
              "threshold": 0.0,
              "windowSize": "PT5M"
            },
            "action": {
              "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
              "sendToServiceOwners": true,
              "customEmails": [ ]
            }
          }
        },
        {
          "apiVersion": "2015-04-01",
          "name": "[concat('ForbiddenRequests ', variables('webSiteName'))]",
          "type": "Microsoft.Insights/alertrules",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[variables('webSiteName')]"
          ],
          "tags": {
            "[concat('hidden-link:', resourceId('Microsoft.Web/sites', variables('webSiteName')))]": "Resource",
            "displayName": "ForbiddenRequestsAlertRule"
          },
          "properties": {
            "name": "[concat('ForbiddenRequests ', variables('webSiteName'))]",
            "description": "[concat(variables('webSiteName'), ' has some requests that are forbidden, status code 403.')]",
            "isEnabled": true,
            "condition": {
              "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
              "dataSource": {
                "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
                "resourceUri": "[resourceId('Microsoft.Web/sites', variables('webSiteName'))]",
                "metricName": "Http403"
              },
              "operator": "GreaterThan",
              "threshold": 0,
              "windowSize": "PT5M"
            },
            "action": {
              "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
              "sendToServiceOwners": true,
              "customEmails": [ ]
            }
          }
        },
        {
          "apiVersion": "2015-04-01",
          "name": "[concat('CPUHigh ', variables('hostingPlanName'))]",
          "type": "Microsoft.Insights/alertrules",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[variables('hostingPlanName')]"
          ],
          "tags": {
            "[concat('hidden-link:', resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName')))]": "Resource",
            "displayName": "CPUHighAlertRule"
          },
          "properties": {
            "name": "[concat('CPUHigh ', variables('hostingPlanName'))]",
            "description": "[concat('The average CPU is high across all the instances of ', variables('hostingPlanName'))]",
            "isEnabled": true,
            "condition": {
              "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
              "dataSource": {
                "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
                "resourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "metricName": "CpuPercentage"
              },
              "operator": "GreaterThan",
              "threshold": 90,
              "windowSize": "PT15M"
            },
            "action": {
              "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
              "sendToServiceOwners": true,
              "customEmails": [ ]
            }
          }
        },
        {
          "apiVersion": "2015-04-01",
          "name": "[concat('LongHttpQueue ', variables('hostingPlanName'))]",
          "type": "Microsoft.Insights/alertrules",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[variables('hostingPlanName')]"
          ],
          "tags": {
            "[concat('hidden-link:', resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName')))]": "Resource",
            "displayName": "AutoScaleSettings"
          },
          "properties": {
            "name": "[concat('LongHttpQueue ', variables('hostingPlanName'))]",
            "description": "[concat('The HTTP queue for the instances of ', variables('hostingPlanName'), ' has a large number of pending requests.')]",
            "isEnabled": true,
            "condition": {
              "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
              "dataSource": {
                "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
                "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]",
                "metricName": "HttpQueueLength"
              },
              "operator": "GreaterThan",
              "threshold": 100.0,
              "windowSize": "PT5M"
            },
            "action": {
              "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
              "sendToServiceOwners": true,
              "customEmails": [ ]
            }
          }
        },
        {
            "name": "[variables('webTestName')]",
            "apiVersion": "2015-05-01",
            "type": "microsoft.insights/webtests",
            "location": "[resourceGroup().location]",
            "tags": {
                "[concat('hidden-link:', resourceId('microsoft.insights/components/', variables('appInsightsName')))]": "Resource"
              },
            "dependsOn": [
              "[concat('microsoft.insights/components/', variables('appInsightsName'))]",
              "[concat('Microsoft.Web/sites/', variables('webSiteName'))]"
            ],
            "properties": {
              "Name": "[variables('webTestName')]",
              "Description": "[concat('Test homepage of ',variables('webTestName'))]",
              "Enabled": true,
              "Frequency": "300",
              "Timeout": "30",
              "Kind": "ping",
              "Locations": "[parameters('webTestLocations')]",
              "Configuration": {
                "WebTest": "[concat('<WebTest Name=\"', variables('webTestName'), '\"',  ' Id=\"', guid(variables('webTestName')) ,'\"    Enabled=\"True\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\">        <Items>        <Request Method=\"GET\" Guid=\"a5f10126-e4cd-570d-961c-cea43999a200\" Version=\"1.1\" Url=\"https://', reference(variables('webSiteName')).hostNames[0] ,'\" ThinkTime=\"0\" Timeout=\"\" ParseDependentRequests=\"True\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>')]"
              },
              "SyntheticMonitorId": "[variables('webTestName')]"
            }
          },
          {
            "name": "[concat(variables('webTestName'), '-alert')]",
            "type": "Microsoft.Insights/alertRules",
            "apiVersion": "2015-04-01",
            "location": "[resourceGroup().location]",
            "tags": {
              "[concat('hidden-link:', resourceId('microsoft.insights/components/', variables('appInsightsName')))]": "Resource",
              "[concat('hidden-link:', resourceId('microsoft.insights/webtests/', variables('webTestName')))]": "Resource"
            },
            "dependsOn": [
              "[concat('microsoft.insights/components/', variables('appInsightsName'))]",
              "[concat('microsoft.insights/webtests/', variables('webTestName'))]"
            ],
            "properties": {
              "name": "[variables('webTestName')]",
              "description": "",
              "isEnabled": true,
              "condition": {
                "odata.type": "Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition",
                "dataSource": {
                  "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
                  "resourceUri": "[resourceId('microsoft.insights/webtests/',variables('webTestName'))]",
                  "metricName": "GSMT_AvRaW"
                },
                "windowSize": "PT15M",
                "failedLocationCount": 1
              },
              "action": {
                "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
                "sendToServiceOwners": true,
                "customEmails": []
              }
            }
          },
          {
            "condition": "[equals(parameters('useCDN'),'Yes')]",
            "name": "[variables('cdnProfileName')]",
            "type": "Microsoft.Cdn/profiles",
            "location": "[resourceGroup().location]",
            "apiVersion": "2016-04-02",
            "tags": {
              "displayName": "[variables('cdnProfileName')]"
            },
            "sku": {
              "name": "[parameters('CDNsku')]"
            },
            "properties": {},
            "resources": [
              {
                "condition": "[equals(parameters('useCDN'),'Yes')]",
                "name": "[variables('cdnEndPointName')]",
                "type": "endpoints",
                "location": "[resourceGroup().location]",
                "apiVersion": "2016-04-02",
                "dependsOn": [
                  "[variables('cdnProfileName')]"
                ],
                "tags": {
                  "displayName": "[variables('cdnEndPointName')]"
                },
                "properties": {
                  "originHostHeader": "[reference(variables('webSiteName')).hostNames[0]]",
                  "isHttpAllowed": true,
                  "isHttpsAllowed": true,
                  "queryStringCachingBehavior": "UseQueryString",
                  "contentTypesToCompress": [
                    "text/plain",
                    "text/html",
                    "text/css",
                    "application/x-javascript",
                    "text/javascript",
                    "font/woff",
                    "font/woff2"
                  ],
                  "isCompressionEnabled": true,
                  "origins": [
                    {
                      "name": "origin1",
                      "properties": {
                        "hostName": "[reference(variables('webSiteName')).hostNames[0]]"
                      }
                    }
                  ]
                }
              }
            ]
          }
    ],
    "$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0"
}